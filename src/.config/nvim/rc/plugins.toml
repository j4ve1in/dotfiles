# Base {{{
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = 'let g:dein#types#git#clone_depth = 1'

[[plugins]]
repo = 'ytet5uy4/abyss.vim'
hook_source = 'colorscheme abyss'

[[plugins]]
repo = 'surround.vim'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = ''' " {{{
let g:auto_ctags = 1
let g:auto_ctags_directory_list = ['.git']
" }}} '''

[[plugins]]
repo = 'kana/vim-submode'
hook_source = ''' " {{{
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')
call submode#enter_with('tabmove', 'n', '', '<Space>t>', ':tabmove +1<CR>')
call submode#enter_with('tabmove', 'n', '', '<Space>t<', ':tabmove -1<CR>')
call submode#map('tabmove', 'n', '', '>', ':tabmove +1<CR>')
call submode#map('tabmove', 'n', '', '<', ':tabmove -1<CR>')
" }}} '''

[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = ''' " {{{
nnoremap <silent> <Space><C-f> :<C-u>Vaffle<CR>

augroup vaffle
  autocmd!
  autocmd VimEnter * nested if @% == '' && buf#byte() == 0 | Vaffle | endif
  autocmd FileType vaffle nnoremap <silent> <buffer> ~ :<C-u>Vaffle ~<CR>
augroup END
" }}} '''

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = ''' " {{{
let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_in_insert_mode = 0
" }}} '''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = 'vim-devicons'
hook_add = ''' " {{{
let g:lightline = {
      \   'colorscheme': 'abyss',
      \   'active': {
      \     'left': [['mode', 'paste'],['vcs', 'filename', 'selector']],
      \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype', 'syntaxcheck']]
      \   },
      \   'component_expand': {
      \     'syntaxcheck': 'plugin#lightline#syntaxcheck',
      \   },
      \   'component_type': {
      \     'syntaxcheck': 'error',
      \   },
      \   'component_function': {
      \     'vcs': 'plugin#lightline#vcs',
      \     'modified': 'plugin#lightline#modified',
      \     'fileformat': 'plugin#lightline#fileformat',
      \     'filetype': 'plugin#lightline#filetype',
      \     'fileencoding': 'plugin#lightline#fileencoding',
      \     'filename': 'plugin#lightline#filename',
      \     'mode': 'plugin#lightline#mode',
      \     'selector': 'plugin#lightline#selector',
      \     'lineinfo': 'plugin#lightline#lineinfo',
      \     'percent':  'plugin#lightline#percent'
      \   }
      \ }

if $DISPLAY == ''
  let g:lightline.separator = { 'left': "", 'right': "" }
  let g:lightline.subseparator = { 'left': "|", 'right': "|" }
else
  let g:lightline.separator = { 'left': "\ue0b0", 'right': "\ue0b2" }
  let g:lightline.subseparator = { 'left': "\ue0b1", 'right': "\ue0b3" }
endif
" }}} '''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'Shougo/context_filetype.vim'
hook_add = ''' " {{{
let g:precious_enable_switchers = {
      \ "*" : {
      \  "setfiletype" : 0
      \ },
      \ "toml" : {
      \  "setfiletype" : 1
      \ },
      \}
" }}} '''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'jaxbot/github-issues.vim'

[[plugins]]
repo = 'b4b4r07/vim-shellutils'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = ''' " {{{
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_prompt = '{n}> '
let g:EasyMotion_startofline = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_verbose = 0

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

map <Space>l <Plug>(easymotion-lineforward)
map <Space>h <Plug>(easymotion-linebackward)

map <Space>j <Plug>(easymotion-j)
map <Space>k <Plug>(easymotion-k)

augroup easymotion
  autocmd!
  autocmd VimEnter,BufEnter * :EMCommandLineNoreMap ; <CR>
  autocmd VimEnter,BufEnter * :EMCommandLineNoreMap <Tab> <Over>(buffer-complete)
  autocmd VimEnter,BufEnter * :EMCommandLineNoreMap <C-j> <Over>(em-scroll-f)
  autocmd VimEnter,BufEnter * :EMCommandLineNoreMap <C-k> <Over>(em-scroll-b)
augroup END
" }}} '''

[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = ''' " {{{
let g:neoterm_position = 'vertical'
" }}} '''

[[plugins]]
repo = 'mattn/emmet-vim'
# }}}

# Selector {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
hook_add = ''' " {{{
nnoremap <denite> <Nop>
nmap <C-Space> <denite>

nnoremap <silent> <denite>b :<C-u>Denite buffer -default-action=tabswitch<CR>
nnoremap <silent> <denite>f :<C-u>Denite file_rec<CR>
nnoremap <silent> <denite>F :<C-u>Denite file_rec -default-action=tabswitch<CR>
nnoremap <silent> <denite>m :<C-u>Denite file_mru<CR>
nnoremap <silent> <denite>M :<C-u>Denite file_mru -default-action=tabswitch<CR>
nnoremap <silent> <denite>/ :<C-u>Denite grep<CR>
nnoremap <silent> <denite>? :<C-u>Denite grep -default-action=tabswitch<CR>
nnoremap <silent> <denite>. :<C-u>Denite file_rec -path=$DOT_BASE_DIR -input=.<CR>
nnoremap <silent> <denite>> :<C-u>Denite file_rec -path=$DOT_BASE_DIR -input=. -default-action=tabswitch<CR>
" }}} '''
hook_source = ''' " {{{
call denite#custom#option('default', 'winheight', 10)
call denite#custom#option('default', 'prompt', '>')
call denite#custom#option('default', 'statusline', 0)
call denite#custom#var('file_rec', 'command',
      \ ['rg', '--files', '-uu', '-S', '--glob', '!.git'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'default_opts',
      \ ['--vimgrep', '-uu', '-S', '--no-heading'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [
      \ '.git/', '.ropeproject/', '__pycache__/',
      \ 'venv/',
      \ 'images/',
      \ '*.min.*',
      \ 'img/', 'fonts/'])
call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
" }}} '''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
depends = 'denite.vim'
hook_add = ''' " {{{
nnoremap <silent> [Denite]gh :<C-u>Denite ghq<CR>
" }}} '''
# }}}

# Completion {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = ''' " {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#max_list = 5

inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
" }}} '''

[[plugins]]
repo = 'Shougo/neosnippet'
on_map = '<Plug>(neosnippet_expand_'
hook_add = ''' " {{{
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
" }}} '''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Shougo/neopairs.vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
# }}}

# VCS {{{
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = ''' " {{{
nnoremap [git] <Nop>
nmap <Space>g [git]

nnoremap [git]a :<C-u>Git add %:p<CR>
nnoremap [git]aa :<C-u>Git add -A<CR>
nnoremap [git]b :<C-u>Gbrowse<CR>
nnoremap [git]c :<C-u>Gcommit<CR>
nnoremap [git]cm :<C-u>Gcommit -m ''<Left>
nnoremap [git]cam :<C-u>Gcommit -am ''<Left>
nnoremap [git]ch :<C-u>Git checkout<Space>
nnoremap [git]cd :<C-u>Gcd<CR>
nnoremap [git]in :<C-u>Git init<CR>
nnoremap [git]s :<C-u>!clear && git -C %:p:h status -s -b && git -C %:p:h stash list<CR>
nnoremap [git]sw :<C-u>!clear && git -C %:p:h show<CR>
nnoremap [git]st :<C-u>Git stash<CR>
nnoremap [git]stl :<C-u>Git stash list<CR>
nnoremap [git]stp :<C-u>Git stash pop<CR>
nnoremap [git]w :<C-u>Gwrite
nnoremap [git]r :<C-u>Gread
nnoremap [git]rm :<C-u>Gremove
nnoremap [git]m :<C-u>Gmove
" }}} '''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = ''' " {{{
nnoremap [git] <Nop>
nmap <Space><C-g> [Agit]

nnoremap [Agit] :<C-u>AgitFile<CR>
" }}} '''
# }}}

# Operator {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
on_map = '<Plug>(operator-flashy'
depends = 'vim-operator-user'
hook_add = ''' " {{{
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
" }}} '''
# }}}

# Textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'vimtaku/vim-textobj-sigil'

[[plugins]]
repo = 'jasonlong/vim-textobj-css'
# }}}

# Syntax Check {{{
[[plugins]]
repo = 'neomake/neomake'
hook_add = ''' " {{{
let g:neomake_place_signs = 0
nnoremap <silent> <C-m> :<C-u>Neomake<CR>

augroup neomake_settings
  autocmd!
  autocmd BufWritePost * Neomake
  autocmd User NeomakeFinished HierStart
  autocmd User NeomakeFinished call lightline#update()
augroup END
" }}} '''

[[plugins]]
repo = 'cohama/vim-hier'
# }}}

# vim: foldmethod=marker:
