# vim: foldmethod=marker:

# Syntax {{{
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [
  'vim-quickrun',
  'vimproc.vim',
  'shabadou.vim',
  'vim-hier',
  'quickfixstatus'
]
on_cmd = [
  'WatchdogsRun',
  'WatchdogsRunSilent',
  'WatchdogsRunSweep'
]
hook_add = ''' " {{{
  nnoremap [Watchdogs] <Nop>
  nmap <Space>W [Watchdogs]

  nnoremap <silent> [Watchdogs] :<C-u>WatchdogsRun<CR>
" }}} '''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'dockerfile'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'
# }}}

# Completion {{{
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua')"
on_event = 'InsertEnter'
depends = 'context_filetype.vim'
hook_add = ''' " {{{
  let g:neocomplete#max_list = 5
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_auto_select = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplete#close_popup()
  inoremap <expr><C-e>  neocomplete#cancel_popup()

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  let g:neocomplete#sources#omni#input_patterns      = {'go': '\h\w\.\w*'}

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'zsh' : '~/.vim/dict/zsh.dict',
        \ 'ruby' : '~/.vim/dict/ruby.dict',
        \ }
" }}}} '''

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
on_ft = 'snippet'
on_map = '<Plug>(neosnippet_expand_'
hook_add = ''' " {{{
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
  let g:neosnippet#disable_runtime_snippets = {'_' : 1}
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
" }}} '''
# }}}

# Others {{{
[[plugins]]
repo = 'Shougo/vimfiler'
depends = ['unite.vim', 'vim-devicons']
on_map = [['n', '<Plug>']]
on_path = '.*'
hook_add = ''' "{{{
  let g:vimfiler_as_default_explorer = 1
  autocmd FileType vimfiler 
        \ nnoremap <buffer><silent>/ 
        \ :<C-u>Unite file -default-action=vimfiler<CR>
  autocmd FileType vimfiler setlocal statusline=VimFiler
  autocmd VimEnter * nested if @% == '' && s:bufByte() == 0 | VimFiler | endif
  function! s:bufByte()
    return line2byte(line('$') + 1) == -1 ? 0 : -1
  endfunction
" }}} '''
hook_source = ''' "{{{
  call vimfiler#custom#profile('default', 'context', { 'auto_cd' : 1 })
" }}} '''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_ft = 'md'
on_map = '<Plug>'
hook_add = ''' "{{{
  nnoremap [Previm] <Nop>
  nmap <Space>pv [Previm]

  nnoremap <silent> [Previm] :<C-u>PrevimOpen<CR>
" }}} '''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-smart-search)'
hook_add = ''' " {{{
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
" }}} '''
# }}}
