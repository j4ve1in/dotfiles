# vim: foldmethod=marker:

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# Unite {{{
[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'vim-devicons']
hook_add = ''' " {{{
  let g:unite_enable_auto_select = 0
  nnoremap [Unite] <Nop>
  nmap <C-Space> [Unite]

  nnoremap <silent> [Unite] :<C-u>Unite<CR>
  nnoremap <silent> [Unite]t :<C-u>Unite<Space>tab<CR>

  " file
  nnoremap <silent> [Unite]f :Unite<Space>file<Space>file/new<Space>directory/new<CR>
  nnoremap <silent> [Unite]F :Unite<Space>file<Space>file/new<Space>directory/new<Space>-default-action=tabopen<CR>

  " file_rec
  nnoremap <silent> [Unite]fr :Unite<Space>file_rec/async<CR>
  nnoremap <silent> [Unite]fR :Unite<Space>file_rec/async<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]fr! :Unite<Space>file_rec/async:!<CR>
  nnoremap <silent> [Unite]fR! :Unite<Space>file_rec/async:!<Space>-default-action=tabopen<CR>

  " git
  nnoremap <silent> [Unite]gf :<C-u>Unite<Space>file_rec/git<CR>
  nnoremap <silent> [Unite]gF :<C-u>Unite<Space>file_rec/git<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]gf :<C-u>Unite<Space>file_rec/git:!<CR>
  nnoremap <silent> [Unite]gF :<C-u>Unite<Space>file_rec/git:!<Space>-default-action=tabopen<CR>

  " file_mru
  nnoremap <silent> [Unite]m :<C-u>Unite<Space>file_mru<CR>
  nnoremap <silent> [Unite]M :<C-u>Unite<Space>file_mru<Space>-default-action=tabopen<CR>

  " find
  nnoremap <silent> [Unite]fi :Unite<Space>find:.<CR>
  nnoremap <silent> [Unite]fI :Unite<Space>find:.<Space>-default-action=tabopen<CR>

  " grep
  nnoremap <silent> [Unite]/ :<C-u>Unite<Space>grep:.<CR>
  nnoremap <silent> [Unite]? :<C-u>Unite<Space>grep:.<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]/g :<C-u>Unite<Space>grep/git:.<CR>
  nnoremap <silent> [Unite]?g :<C-u>Unite<Space>grep/git:.<Space>-default-action=tabopen<CR>
  if executable('hw')
    let g:unite_source_grep_command = 'hw'
    let g:unite_source_grep_default_opts = '--no-group --no-color'
    let g:unite_source_grep_recursive_opt = ''
  endif

  " others
  nnoremap <silent> [Unite]v :<C-u>Unite<Space>menu:vim<CR>
  nnoremap <silent> [Unite]V :<C-u>Unite<Space>menu:vim<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]z :<C-u>Unite<Space>menu:zsh<CR>
  nnoremap <silent> [Unite]Z :<C-u>Unite<Space>menu:zsh<Space>-default-action=tabopen<CR>

  let g:unite_source_menu_menus = {}
  let g:unite_source_menu_menus.vim = { 'description': 'Edit vim files' }
  let g:unite_source_menu_menus.vim.file_candidates = [
    \       [$HOME . '/.vim/rc/apperance.vim'    , $HOME . '/.vim/rc/apperance.vim'    ],
    \       [$HOME . '/.vim/rc/base.vim'         , $HOME . '/.vim/rc/base.vim'         ],
    \       [$HOME . '/.vim/rc/colors.vim'       , $HOME . '/.vim/rc/colors.vim'       ],
    \       [$HOME . '/.vim/rc/init.vim'         , $HOME . '/.vim/rc/init.vim'         ],
    \       [$HOME . '/.vim/rc/keymap.vim'       , $HOME . '/.vim/rc/keymap.vim'       ],
    \       [$HOME . '/.vim/rc/plugins.vim'      , $HOME . '/.vim/rc/plugins.vim'      ],
    \       [$HOME . '/.vim/rc/plugins.lazy.toml', $HOME . '/.vim/rc/plugins.lazy.toml'],
    \       [$HOME . '/.vim/rc/plugins.toml'     , $HOME . '/.vim/rc/plugins.toml'     ]
    \     ]
  let g:unite_source_menu_menus.zsh = { 'description': 'Edit zsh files' }
  let g:unite_source_menu_menus.zsh.file_candidates = [
    \       [$HOME . '/.zshenv'          , $HOME . '/.zshenv'               ],
    \       [$HOME . '/.zprofile'        , $HOME . '/.zsh/.zprofile'        ],
    \       [$HOME . '/rc/init.zsh'      , $HOME . '/.zsh/rc/init.zsh'      ],
    \       [$HOME . '/rc/alias.zsh'     , $HOME . '/.zsh/rc/alias.zsh'     ],
    \       [$HOME . '/rc/base.zsh'      , $HOME . '/.zsh/rc/base.zsh'      ],
    \       [$HOME . '/rc/completion.zsh', $HOME . '/.zsh/rc/completion.zsh'],
    \       [$HOME . '/rc/plugins.zsh'   , $HOME . '/.zsh/rc/plugins.zsh'   ],
    \       [$HOME . '/rc/prompt.zsh'    , $HOME . '/.zsh/rc/prompt.zsh'    ]
    \     ]
" }}} '''
hook_source = ''' " {{{
  call unite#custom#profile('default', 'context', {
    \ 'start_insert': '1',
    \ 'prompt_direction': 'top',
    \ 'prompt': '> ',
    \ 'candidate_icon': '- ',
    \ 'hide_icon': 0 })

  " ignore patterns
  let s:unite_ignore_patterns='\.\(gif\|jpe\?g\|png\|webp\)$'
  call unite#custom#source('file_rec/async', 'ignore_pattern', s:unite_ignore_patterns)
  call unite#custom#source('file_rec/git', 'ignore_pattern', s:unite_ignore_patterns)
" }}} '''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'basyura/unite-rails'
depends = 'unite.vim'
hook_add = ''' " {{{
  nnoremap <silent> [Unite]r :<C-u>Unite<CR>rails/
  nnoremap <silent> [Unite]ra :<C-u>Unite<Space>rails/asset<CR>
  nnoremap <silent> [Unite]rA :<C-u>Unite<Space>rails/asset<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rm :<C-u>Unite<Space>rails/model<CR>
  nnoremap <silent> [Unite]rM :<C-u>Unite<Space>rails/model<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rd :<C-u>Unite<Space>rails/db<CR>
  nnoremap <silent> [Unite]rD :<C-u>Unite<Space>rails/db<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rv :<C-u>Unite<Space>rails/view<CR>
  nnoremap <silent> [Unite]rV :<C-u>Unite<Space>rails/view<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rc :<C-u>Unite<Space>rails/controller<CR>
  nnoremap <silent> [Unite]rC :<C-u>Unite<Space>rails/controller<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rco :<C-u>Unite<Space>rails/config<CR>
  nnoremap <silent> [Unite]rcO :<C-u>Unite<Space>rails/config<Space>-default-action=tabopen<CR>
  nnoremap <silent> [Unite]rh :<C-u>Unite<Space>rails/helper<CR>
  nnoremap <silent> [Unite]rH :<C-u>Unite<Space>rails/helper<Space>-default-action=tabopen<CR>
" }}} '''

[[plugins]]
repo = 'kmnk/vim-unite-giti'
depends = 'unite.vim'
hook_add = ''' " {{{
  nnoremap <silent> [Unite]g :<C-u>Unite<Space>giti<CR>
  nnoremap <silent> [Unite]gb :<C-u>Unite<Space>giti/branch<CR>
  nnoremap <silent> [Unite]gB :<C-u>Unite<Space>giti/branch_all<CR>
  nnoremap <silent> [Unite]gl :<C-u>Unite<Space>giti/log<CR>
  nnoremap <silent> [Unite]gs :<C-u>Unite<Space>giti/status<CR>
" }}} '''

[[plugins]]
repo = 'sorah/unite-ghq'
depends = 'unite.vim'
hook_add = ''' " {{{
  nnoremap <silent> [Unite]gh :<C-u>Unite<Space>ghq<Space>-default-action=rec/async<CR>
" }}} '''

[[plugins]]
repo = 'lambdalisue/vim-gista-unite'
depends = 'unite.vim'
on_source = 'lambdalisue/vim-gista'
hook_add = 'nnoremap <silent> [Unite]gi :<C-u>Unite<Space>gista<CR>'
# }}}

# Git {{{
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = ''' " {{{
  nnoremap [git] <Nop>
  nmap <Space>g [git]

  nnoremap [git]a :<C-u>Git<Space>add<Space>%:p<CR>
  nnoremap [git]aa :<C-u>Git<Space>add<Space>-A<CR>
  nnoremap [git]b :<C-u>Gbrowse<CR>
  nnoremap [git]c :<C-u>Gcommit<CR>
  nnoremap [git]cm :<C-u>Gcommit<Space>-m<Space>''<Left>
  nnoremap [git]cam :<C-u>Gcommit<Space>-am<Space>''<Left>
  nnoremap [git]ch :<C-u>Git<Space>checkout<Space>
  nnoremap [git]cd :<C-u>Gcd<CR>
  nnoremap [git]in :<C-u>Git<Space>init<CR>
  nnoremap [git]s :<C-u>!clear<Space>&&<Space>git<Space>-C<Space>%:p:h<Space>status<Space>-s<Space>-b<Space>&&<Space>git<Space>-C<Space>%:p:h<Space>stash<Space>list<CR>
  nnoremap [git]sw :<C-u>!clear<Space>&&<Space>git<Space>-C<Space>%:p:h<Space>show<CR>
  nnoremap [git]st :<C-u>Git<Space>stash<CR>
  nnoremap [git]stl :<C-u>Git<Space>stash<Space>list<CR>
  nnoremap [git]stp :<C-u>Git<Space>stash<Space>pop<CR>
  nnoremap [git]w :<C-u>Gwrite
  nnoremap [git]r :<C-u>Gread
  nnoremap [git]rm :<C-u>Gremove
  nnoremap [git]m :<C-u>Gmove
" }}} '''

[[plugins]]
repo = 'lambdalisue/vim-gista'
if = 'has("python3")'
hook_add = ''' " {{{
  nnoremap [git] <Nop>
  nmap <Space>g [git]

  nnoremap [git]i :<C-u>Gista<Space>--post<Space>--description<Space>''<Left>
  nnoremap [git]ip :<C-u>Gista<Space>--post<Space>--public<Space>--description<Space>''<Left>
  nnoremap [git]il :<C-u>Gista<Space>--list<CR>
  nnoremap [git]ic :<C-u>tabedit<Space><Space>\|<Space>:set<Space>ro
              \<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
  let g:gista#post_private = '1'
" }}} '''
# }}}

# Operator {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
on_map = '<Plug>(operator-flashy'
depends = 'vim-operator-user'
hook_add = ''' " {{{
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
  highlight Flashy ctermfg=0 ctermbg=26
" }}} '''
# }}}

# Textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
depends = 'vim-textobj-user'
# }}}

# Others {{{
[[plugins]]
repo = 'surround.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = ''' " {{{
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
  call submode#enter_with('tabmove', 'n', '', '<Space>t>', ':tabmove<Space>+1<CR>')
  call submode#enter_with('tabmove', 'n', '', '<Space>t<', ':tabmove<Space>-1<CR>')
  call submode#map('tabmove', 'n', '', '>', ':tabmove<Space>+1<CR>')
  call submode#map('tabmove', 'n', '', '<', ':tabmove<Space>-1<CR>')
  call submode#enter_with('ex-move', 'nv', '', '<Space><Space>', '<Nop>')
  call submode#leave_with('ex-move', 'nv', '', '<Space>')
  call submode#map('ex-move', 'nv', '', 'j', '<C-f>zz')
  call submode#map('ex-move', 'nv', '', 'k', '<C-b>zz')
  call submode#map('ex-move', 'nv', '', 'n', '5jzz')
  call submode#map('ex-move', 'nv', '', 'm', '5kzz')
  call submode#map('ex-move', 'nv', '', 'l', '}zz')
  call submode#map('ex-move', 'nv', '', 'h', '{zz')
" }}} '''

[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = ''' " {{{
  nnoremap [dispatch] <Nop>
  nmap <Space>dp [dispatch]
  nnoremap [dispatch] :<C-u>Dispatch<Space>
  nnoremap [dispatch]c :<C-u>Copen<CR>
  nnoremap [dispatch]r :<C-u>Start<Space>irb<CR>
  nnoremap [dispatch]h :<C-u>Start<Space>ghci<CR>

  nnoremap [git] <Nop>
  nmap <Space>g [git]

  nnoremap [git]f :<C-u>Dispatch<Space>git<Space>-C<Space>%:p:h<Space>fetch<Space>--prune<CR>
  nnoremap [git]p :<C-u>Dispatch<Space>git<Space>-C<Space>%:p:h<Space>pull<Space>--prune<CR>
  nnoremap [git]ps :<C-u>Dispatch<Space>git<Space>-C<Space>%:p:h<Space>push<CR>
  nnoremap [git]cl :<C-u>Dispatch<Space>git<Space>-C<Space>%:p:h<Space>clone<Space>
  nnoremap [git]m :<C-u>Dispatch<Space>git<Space>-C<Space>%:p:h<Space>merge<Space>--no-ff<CR>
  nnoremap [git]h :<C-u>Dispatch<Space>ghq<Space>get<Space>
" }}} '''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>(incsearch-'
hook_add = ''' " {{{
  let g:incsearch#no_inc_hlsearch = 1
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
" }}} '''

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = ''' " {{{
  let g:auto_save = 1
  let g:auto_save_in_insert_mode = 0
" }}} '''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = 'has("python3")'
hook_add = 'let g:EditorConfig_exclude_patterns = ["gista:*", "scp://.*"]'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = ''' " {{{
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=247
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=239
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_color_change_percent=30
  let g:indent_guides_guide_size=1
  let g:indent_guides_exclude_filetypes = ['help', 'calendar', 'thumbnail', 'tweetvim', 'man', 'vimfiler', 'diff']
" }}} '''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = ''' " {{{
  let s:white  = 255
  let s:black  = 0
  let s:blue   = 17
  let s:lightblue = 26
  let s:cyan = 6
  let s:purple = 54
  let s:gray = 235

  let s:p = {
        \ 'normal':   {},
        \ 'inactive': {},
        \ 'insert':   {},
        \ 'replace':  {},
        \ 'visual':   {},
        \ 'tabline':  {}}

  let s:p.normal.middle = [['', '', s:white, s:black]]
  let s:p.normal.left = [
        \ ['', '', s:white, s:blue],
        \ ['', '', s:white, s:lightblue]]
  let s:p.normal.right = [
        \ ['', '', s:white, s:blue],
        \ ['', '', s:white, s:lightblue]]

  let s:p.inactive.middle = [['', '', s:white, s:gray]]
  let s:p.inactive.right = [
        \ s:p.inactive.middle[0],
        \ s:p.inactive.middle[0]]
  let s:p.inactive.left = [
        \ s:p.inactive.middle[0],
        \ s:p.inactive.middle[0]]

  let s:p.insert.left = [
        \ ['', '', s:black, s:white],
        \ s:p.normal.left[1]]
  let s:p.replace.left = [
        \ ['', '', s:white, s:cyan],
        \ s:p.normal.left[1]]
  let s:p.visual.left = [
        \ ['', '', s:white, s:purple],
        \ s:p.normal.left[1]]

  let s:p.tabline.middle = [['', '', s:white, 'none']]
  let s:p.tabline.right = [
        \ ['', '', s:white, s:blue],
        \ ['', '', s:blue, 'none']]
  let s:p.tabline.left = [['', '', s:white, s:black]]
  let s:p.tabline.tabsel = [['', '', s:white, s:blue]]
  let g:lightline#colorscheme#abisso#palette = s:p
  let g:lightline = {
        \ 'colorscheme': 'abisso',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],[ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'modified': 'LightLineModified',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode'
        \ },
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
        \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
        \ }

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    try
      if exists('*fugitive#head')
        let mark = "\ue0a0 "
        let _ = fugitive#head()
        return strlen(_) ? mark._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  set noshowmode
" }}} '''

[[plugins]]
repo = 'deris/vim-shot-f'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'Shougo/context_filetype.vim'
hook_add = 'let g:precious_enable_switch_CursorMoved = { "*" : 1, "help" : 0 }'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'jaxbot/github-issues.vim'
# }}}
